Cellranger pipeline
------------


The first thing that you need to do is generate a reference genome to align the sequencing reads to.
The genome used for alingment was downloaded from https://www.ensembl.org/Gallus_gallus/Info/Index
The two files downloaded are: Gallus_gallus.GRCg6a.97.gtf and Gallus_gallus.GRCg6a.dna.toplevel.fa

The genome needs to be filtered through the cellranger pipeline and a 10x reference made. The genome is filtered based on  gene_biotypes. 10x recommend keeping protein coding, lincRNA, antisense and VDJ genes. You can run the r code below to get a table of the gene_biotypes in the chick .gtf


------------------------------------------------------------------------------------------------------------------------------
levels_from_gtf.R
==================

setwd("location/of/gtf")
gtf<-read.table("Gallus_gallus.GRCg6a.97.gtf", header = F, sep = ";", fill = T, colClasses = "character")
table(unlist(gtf)[grep("gene_biotype", unlist(gtf))])
------------------------------------------------------------------------------------------------------------------------------



Then in order to make the reference you need to run the cellranger mkgtf and mkref functions in the terminal


------------------------------------------------------------------------------------------------------------------------------
cellranger_reference_genome_script
======================================

#!/bin/bash

# place cellranger into PATH so that cellranger functions can be executed
export PATH=/home/alexthiery/Documents/10x/Analysis/cellranger/cellranger-3.0.2:$PATH && \

# move to directory where you want the output to be
cd /home/alexthiery/Documents/10x/Analysis/cellranger/ && \

# this step filters out genes based on the gene biotypes listed in attributes. If all genes are to be kept, do not run cellranges_mkgtf
cellranger mkgtf ./galgal6/Gallus_gallus.GRCg6a.97.gtf ./galgal6/Gallus_gallus.GRCg6a.97.filtered.gtf \
--attribute=gene_biotype:protein_coding \
--attribute=gene_biotype:lncRNA && \

mkdir -p reference_genome/filtered && \

cd ./reference_genome/filtered/ && \

cellranger mkref --genome=galgal6_filtered_reference_genome \
--fasta=../../galgal6/Gallus_gallus.GRCg6a.dna.toplevel.fa \
--genes=../../galgal6/Gallus_gallus.GRCg6a.97.filtered.gtf \
--nthreads=6 \
--memgb=28
------------------------------------------------------------------------------------------------------------------------------



Now that the reference genome has been made we can move onto alligning reads from the sequencer to our genome and generating count matrices.

The first step of the pipeline is to run cellranger makefastq which demultiplexes the data. This has already been done by the crick, and the output is fastq files for each of the input samples. However, in the case of our sequencing, the samples were sequenced twice - once across two seperate flowcells. This means that the data from the two flowcells needs to be combined. This is done during the cellranger count step.

Cellranger count generates count matrix from the fastq files generated by cellranger makefastq. Cellranger count is ran on all of the runs for each samples. e.g. if a library is ran across 8 lanes and 2 flowcells, all of this data is included in the cellranger count run. However each library is ran seperately. Therefore here we run cellranger count on each of the four libraries individually, with the two flowcell runs being combined through seperating their paths with a comma.

This script is ran in the terminal


------------------------------------------------------------------------------------------------------------------------------
cellranger_count_script
========================

#!/bin/bash

#place cellranger into PATH so that cellranger functions can be executed
export PATH=/home/alexthiery/Documents/10x/Analysis/cellranger/cellranger-3.0.2:$PATH && \

# move to new working directory
mkdir -p /media/alexthiery/Seagate\ Backup\ Plus\ Drive/cellranger_output/ && \

cd /media/alexthiery/Seagate\ Backup\ Plus\ Drive/cellranger_output/ && \
# run cellranger count 4 times, once for each library. Flowcell runs are combined through listing the paths to their respective fastq files with a comma.

cellranger count --id=cellranger_count_hh4 \
--fastqs=~/Documents/10x/Crick_output_raw/SC19040/190524_K00102_0343_AH7MYHBBXY/fastq/THI300A1/,~/Documents/10x/Crick_output_raw/SC19040/190614_K00102_0353_BH7T3WBBXY/fastq/THI300A1 \
--sample=THI300A1 \
--transcriptome=~/Documents/10x/Analysis/cellranger/reference_genome/filtered/galgal6_filtered_reference_genome && \

cellranger count --id=cellranger_count_4ss \
--fastqs=~/Documents/10x/Crick_output_raw/SC19040/190524_K00102_0343_AH7MYHBBXY/fastq/THI300A3/,~/Documents/10x/Crick_output_raw/SC19040/190614_K00102_0353_BH7T3WBBXY/fastq/THI300A3 \
--sample=THI300A3 \
--transcriptome=~/Documents/10x/Analysis/cellranger/reference_genome/filtered/galgal6_filtered_reference_genome && \

cellranger count --id=cellranger_count_8ss \
--fastqs=~/Documents/10x/Crick_output_raw/SC19040/190524_K00102_0343_AH7MYHBBXY/fastq/THI300A4/,~/Documents/10x/Crick_output_raw/SC19040/190614_K00102_0353_BH7T3WBBXY/fastq/THI300A4 \
--sample=THI300A4 \
--transcriptome=~/Documents/10x/Analysis/cellranger/reference_genome/filtered/galgal6_filtered_reference_genome && \

cellranger count --id=cellranger_count_hh6 \
--fastqs=~/Documents/10x/Crick_output_raw/SC19040/190524_K00102_0343_AH7MYHBBXY/fastq/THI300A6/,~/Documents/10x/Crick_output_raw/SC19040/190614_K00102_0353_BH7T3WBBXY/fastq/THI300A6 \
--sample=THI300A6 \
--transcriptome=~/Documents/10x/Analysis/cellranger/reference_genome/filtered/galgal6_filtered_reference_genome

------------------------------------------------------------------------------------------------------------------------------



The output from this will be 4 folders, one for each of the individual libraries. There is a html file for each of these which can will show the tsnes of the data, and some basic stats on the sample. You can also load the cloupe.cloupe file into loupe cell browser for some preliminary analysis of each sample.

For downstream analysis we need to make a single count matrix - instead of making this using cellranger --aggr, I use Seurat::merge in order to prevent unnecessary loss of reads 
------------------------------------------------------------------------------------------------------------------------------

The galgal6 gtf does not have all of the MT genes annotated with the MT_ prefix. This is important as this is needed to identify the % MT content for filtering downstream. I have written a python script which searches for all MT genes in the gtf, and then matches these to the features file and appends their names with MT_

All of this analysis is done on a copy of the initial directory called filtered_feature_bc_matrix_MT-edit. This is so that we still have a backup of the initial directory prior to filtering.

This script now runs in a loop for each of the tissues separately

------------------------------------------------------------------------------------------------------------------------------
features_MT_edit.py
=======================

# define function which will keep only unique
def unique_list(l):
  x = []
  for a in l:
    if a not in x:
      x.append(a)
  return x

def matrix_MT_edit(input_dir, copy_dir, filt_gtf, feat):
  """input dir = count matrix from cellranger,
  copy dir = name of folder for output from the MT_filtering,
  filt_gtf = filtered gtf from cellranger mkgtf,
  feat = features.tsv file from count matrix (out) folder"""

  # make copy of input directory which will be edited
  shutil.copytree(input_dir, copy_dir)

  # assign files to objects for python
  filtgtf = open(filt_gtf)
  features = gzip.open(feat)
  # make empty list called mylist
  mylist = []
  # open filtered gtf which is made by cellranger mkgtf (filtered for protein_coding and lncRNA)
  # if the line starts with MT then keep the line (MT chromosome) and then extract the gene name from this line and add to mylist
  for line in filtgtf:
      if line.startswith('MT'):
        if "gene_name" in line:
          mylist.append(line.split('gene_name')[1].split(';')[0].replace('"', '').strip())

  # make mylist unique
  mylist = unique_list(mylist)

  # search features.tsv for genes which belong to the MT chromosome (mylist genes)
  # if any of these genes are present, then take the gene name from the line and add the MT_ prefix.
  # if there is MT- already, then strip this and replace with MT_
  # write lines from loop to the output object
  output = []
  for line2 in features:
    if any(("\t"+gene+"\t") in line2 for gene in mylist):
      if "\tMT-" in line2:
        output.append(line2)
      else:
        b = re.sub("\t", "\tMT-", line2, 1)
        output.append(b)
    else:
      output.append(line2)

  # this step is a quality control step to see which lines have been modified from the initial features file.
  # this should only be the genes which are found on the MT chromosome.
  output2 = list(output)
  features2 = list(gzip.open(feat))
  for line in output2:
    if line not in features2:
      print (line)

  # overwrite features file with edited MT- label features
  outFile = gzip.open(feat, 'w')
  for line in output:
    outFile.write(line)

# import regular expressions module
import re
# import gzip which allows unzipping and zipping of files
import gzip
# import shutil which allows to copy directories
import shutil

input_dir_list = ['/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_hh4/outs/filtered_feature_bc_matrix',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_hh6/outs/filtered_feature_bc_matrix',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_4ss/outs/filtered_feature_bc_matrix',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_8ss/outs/filtered_feature_bc_matrix']

copy_dir_list = ['/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_hh4/outs/filtered_feature_bc_matrix_MT_edit',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_hh6/outs/filtered_feature_bc_matrix_MT_edit',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_4ss/outs/filtered_feature_bc_matrix_MT_edit',
'/Users/alex/Desktop/10x/Analysis/cellranger/cellranger_output/cellranger_count_8ss/outs/filtered_feature_bc_matrix_MT_edit']

filt_gtf_list = '/Users/alex/Desktop/10x/Analysis/cellranger/galgal6/Gallus_gallus.GRCg6a.97.filtered.gtf'

for i in range(len(input_dir_list)):
  feat1=copy_dir_list[i]
  matrix_MT_edit(input_dir=input_dir_list[i], copy_dir=copy_dir_list[i], filt_gtf=filt_gtf_list, feat=feat1+'/features.tsv.gz')

------------------------------------------------------------------------------------------------------------------------------


Now the filtered_feature_bc_matrix_MT_edit folders for each stage can be input into Seurat  whilst the filtered_feature_bc_matrix folders contains the initial output from cell ranger prior to filtering.
