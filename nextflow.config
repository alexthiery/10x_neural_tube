#!/usr/bin/env nextflow

// Static details about the pipeline

process.container = 'alexthiery/10x_neural_tube:dev'

manifest {
  name = 'alexthiery/10x_neural_tube'
  author = 'Alex Thiery'
  homePage = 'https://github.com/alexthiery/10x_neural_tube/tree/master'
  description = 'Nextflow pipeline to run 10x Genomics single cell RNA-seq alignment with CellRanger v3.0.2 and downstream analysis'
  nextflowVersion = '20.01.1'
}

// Create run profiles
profiles {
  local { includeConfig 'conf/local.config' }
  crick { includeConfig 'conf/crick.config' }
}

params {
    // Crick specific computing max resource levels
    max_memory = 224.GB
    max_cpus = 32
    max_time = 72.h

    // General
    alignment_outDir = './alignmentOut'
    r_outDir = './results'
}


// Create process scaling defaults for running on a cluster
process {

  // Memory and time increases with the number of retrys
  cpus = { check_max( 2, 'cpus' ) }
  memory = { check_max( 4.GB * task.attempt, 'memory' ) }
  time = { check_max( 2.h * task.attempt, 'time' ) }

  errorStrategy = { task.exitStatus in [143,137,104,134,139] ? 'retry' : 'terminate' }
  maxRetries = 2
  maxErrors = '-1'

  // Process-specific resource requirements
  withLabel: low_memory {
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
  }
  withLabel: mid_memory {
    cpus = { check_max (4, 'cpus')}
    memory = { check_max( 28.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withLabel: high_memory {
    cpus = { check_max (10, 'cpus')}
    memory = { check_max( 70.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  withName: runR {
    cpus = { check_max (30, 'cpus')}
    memory = { check_max( 100.GB * task.attempt, 'memory' ) }
    time = { check_max( 2.h * task.attempt, 'time' ) }
  }
}


// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}