#!/usr/bin/env nextflow

// Static details about the pipeline

process.container = 'alexthiery/10x_neural_tube:v1.0'

manifest {
  name = 'alexthiery/10x_neural_tube'
  author = 'Alex Thiery'
  homePage = 'https://github.com/alexthiery/10x_neural_tube/tree/master'
  description = 'Nextflow pipeline to run 10x Genomics single cell RNA-seq alignment with CellRanger v3.0.2 and downstream analysis'
  nextflowVersion = '20.01.0'
  mainScript = 'main.nf'
}

params {
    max_memory = 224.GB
    max_cpus = 32
    max_time = 72.h

    // General
    outDir = "./results"
    alignment_outDir = "${params.outDir}/alignmentOut"
    r_outDir = "${params.outDir}/R_results"
    tracedir = "${params.outDir}/pipeline_info"
}

// Load base.config by default for all pipelines
includeConfig 'conf/base.config'

// Create run profiles
profiles {
  docker { docker.enabled = true }
  singularity { singularity.enabled = true
                singularity.autoMounts = true
                docker.enabled = false }
  crick { includeConfig 'conf/crick.config'}
}


timeline {
  enabled = true
  file = "${params.tracedir}/execution_timeline.html"
}
report {
  enabled = true
  file = "${params.tracedir}/execution_report.html"
}
trace {
  enabled = true
  file = "${params.tracedir}/execution_trace.txt"
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if (type == 'memory') {
    try {
      if (obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'time') {
    try {
      if (obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if (type == 'cpus') {
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}